openapi: 3.0.0
servers:
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/VitoriaMariadoNascimento/Movies_Collection/1.0.0
info:
  version: "1.0.0"
  title: Movies_Collection
  description: The API for the Movies Collection 
paths:
  /Movies:
    get:
      tags:
        - Movie
      description: Returns all registered movies
      operationId: getMovies
      responses:
        '200':
          description: All the movies
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MovieInterface'
    post:
      tags:
        - Movie
      description: Creates a new movie
      operationId: createMovie
      requestBody:
        description: Movie to be created
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MovieInterface'
      responses:
        '201':
          description: Movie successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MovieInterface'
  /Movies/{id}:
    get:
      tags:
        - Movie
      description: Returns a single movie by ID
      operationId: getMovieById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Movie found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MovieInterface'
    put:
      tags:
        - Movie
      description: Updates a movie by ID
      operationId: updateMovieById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: Movie data to be updated
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MovieInterface'
      responses:
        '200':
          description: Movie successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MovieInterface'
    delete:
      tags:
        - Movie
      description: Deletes a movie by ID
      operationId: deleteMovieById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '204':
          description: Movie successfully deleted

  /Customers:
    get:
      tags:
        - Customer
      description: Returns all registered customers
      operationId: getCustomers
      responses:
        '200':
          description: All the customers
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CustomerInterface'
    post:
      tags:
        - Customer
      description: Creates a new customer
      operationId: createCustomer
      requestBody:
        description: Customer to be created
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerInterface'
      responses:
        '201':
          description: Customer successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerInterface'
  /Customers/{id}:
    get:
      tags:
        - Customer
      description: Returns a single customer by ID
      operationId: getCustomerById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Customer found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerInterface'
    put:
      tags:
        - Customer
      description: Updates a customer by ID
      operationId: updateCustomerById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: Customer data to be updated
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerInterface'
      responses:
        '200':
          description: Customer successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerInterface'
    delete:
      tags:
        - Customer
      description: Deletes a customer by ID
      operationId: deleteCustomerById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '204':
          description: Customer successfully deleted

  /Administrators:
    get:
      tags:
        - Administrator
      description: Returns all registered administrators
      operationId: getAdministrators
      responses:
        '200':
          description: All the administrators
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AdministratorInterface'
    post:
      tags:
        - Administrator
      description: Creates a new administrator
      operationId: createAdministrator
      requestBody:
        description: Administrator to be created
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdministratorInterface'
      responses:
        '201':
          description: Administrator successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdministratorInterface'
  /Administrators/{id}:
    get:
      tags:
        - Administrator
      description: Returns a single administrator by ID
      operationId: getAdministratorById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Administrator found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdministratorInterface'
    put:
      tags:
        - Administrator
      description: Updates an administrator by ID
      operationId: updateAdministratorById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: Administrator data to be updated
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdministratorInterface'
      responses:
        '200':
          description: Administrator successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdministratorInterface'
    delete:
      tags:
        - Administrator
      description: Deletes an administrator by ID
      operationId: deleteAdministratorById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '204':
          description: Administrator successfully deleted

components:
  schemas:
    MovieInterface:
      type: object
      properties:
        id:
          type: integer
          format: int32
        title:
          type: string
        synopsis:
          type: string
        genre:
          type: string
        rating:
          type: string
    CustomerInterface:
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
        login:
          type: object
          additionalProperties:
            type: string
        moviesList:
          type: array
          items:
            $ref: '#/components/schemas/MovieInterface'
    AdministratorInterface:
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
        login:
          type: object
          additionalProperties:
            type: string
